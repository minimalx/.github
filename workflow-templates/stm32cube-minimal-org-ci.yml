name: STM32 Project CI/CD

# Global anchors (YAML-level, not GH env for `uses:`)
env:
  SUBMODULE_DIR: &SUBMODULE_DIR workflow-templates
  VERSION_ACTION: &VERSION_ACTION ./workflow-templates/actions/version-c
  FORMATTING_ACTION: &FORMATTING_ACTION ./workflow-templates/actions/clang-format-check
  BUILD_ACTION: &BUILD_ACTION ./workflow-templates/actions/build-stm32
  DEV_BUILD_TARGET: &DEV_BUILD_TARGET <YOUR_DEBUG_BUILD_TARGET>
  PROD_BUILD_TARGET: &PROD_BUILD_TARGET <YOUR_RELEASE_BUILD_TARGET>

on:
  pull_request:
    branches: [ $default-branch ]
  push:
    branches: [ $default-branch ]

jobs:
  version-main:
    name: Version (main-app)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
      version_tag: ${{ steps.ver.outputs.version_tag }}
      changed: ${{ steps.ver.outputs.changed }}
    steps:
      - name: Checkout (tags + submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # needed for semantic-version to see tags
          submodules: recursive   # to pull your local actions submodules
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Version
        id: ver
        uses: *VERSION_ACTION
        with:
          tag-prefix: "SM_APP_v"
          project-root: main-app
          bump-pattern-prefix: "MAIN_"

      - name: Upload generated version.h
        uses: actions/upload-artifact@v4
        with:
          name: version-header-main
          path: main-app/Core/Inc/version.h

  version-bl:
    name: Version (bootloader)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
      version_tag: ${{ steps.ver.outputs.version_tag }}
      changed: ${{ steps.ver.outputs.changed }}
    steps:
      - name: Checkout (tags + submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # needed for semantic-version to see tags
          submodules: recursive   # to pull your local actions submodules
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Version
        id: ver
        uses: *VERSION_ACTION
        with:
          tag-prefix: "SM_BL_v"
          project-root: bootloader
          bump-pattern-prefix: "BL_"

      - name: Upload generated version.h
        uses: actions/upload-artifact@v4
        with:
          name: version-header-bl
          path: bootloader/Core/Inc/version.h

  formatting:
    name: Formatting Check
    runs-on: ubuntu-latest
    # Optional: run formatting in parallel to version. If you prefer to wait, add: needs: [version]
    steps:
      - name: Checkout (submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: true

      - name: Run formatting
        uses: *FORMATTING_ACTION
        with:
          # On push, base_ref is empty; default to main
          base-ref: ${{ github.event_name == 'pull_request' && github.base_ref || 'main' }}
          changed-exts: "proto"


  tag-main:
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && needs.version-main.outputs.changed == 'true'
    needs:
      - build-prod-main
      - version-main
    runs-on: ubuntu-latest
    permissions:
      contents: write   # required to push tags
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force

      - name: Create tag if missing
        env:
          TAG: ${{ needs.version-main.outputs.version_tag }}
        run: |
          set -euo pipefail

          # Does the tag exist on the remote already?
          if git ls-remote --exit-code --tags origin "refs/tags/${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists on origin; skipping."
            exit 0
          fi

          git config --local user.email "action@github.com"
          git config --local user.name  "GitHub Action"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "refs/tags/${TAG}"

  tag-bl:
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && needs.version-bl.outputs.changed == 'true'
    needs:
      - build-prod-bl
      - version-bl
    runs-on: ubuntu-latest
    permissions:
      contents: write   # required to push tags
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force

      - name: Create tag if missing
        env:
          TAG: ${{ needs.version-bl.outputs.version_tag }}
        run: |
          set -euo pipefail

          # Does the tag exist on the remote already?
          if git ls-remote --exit-code --tags origin "refs/tags/${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists on origin; skipping."
            exit 0
          fi

          git config --local user.email "action@github.com"
          git config --local user.name  "GitHub Action"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "refs/tags/${TAG}"

  build-dev-main:
    if: github.event_name == 'pull_request' && needs.version-main.outputs.changed == 'true'
    needs: [version-main, formatting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Build (Debug, main-app)
        uses: *BUILD_ACTION
        with:
          version-art-name: version-header-main
          version-location: main-app/Core/Inc
          project-path: main-app
          project-target: *DEV_BUILD_TARGET_MAIN
          fw_art_name: Debug_${{ needs.version-main.outputs.version_tag }}

  build-prod-main:
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && needs.version-main.outputs.changed == 'true'
    needs: [version-main, formatting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Build (Release, main-app)
        uses: *BUILD_ACTION
        with:
          version-art-name: version-header-main
          version-location: main-app/Core/Inc
          project-path: main-app
          project-target: *PROD_BUILD_TARGET_MAIN
          fw_art_name: Release_${{ needs.version-main.outputs.version_tag }}

  build-dev-bl:
    if: github.event_name == 'pull_request' && needs.version-bl.outputs.changed == 'true'
    needs: [version-bl, formatting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Build (Debug, bootloader)
        uses: *BUILD_ACTION
        with:
          version-art-name: version-header-bl
          version-location: bootloader/Core/Inc
          project-path: bootloader
          project-target: *DEV_BUILD_TARGET_BL
          fw_art_name: Debug_${{ needs.version-bl.outputs.version_tag }}

  build-prod-bl:
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && needs.version-bl.outputs.changed == 'true'
    needs: [version-bl, formatting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.ACTIONS_BOT_PAT }}
          persist-credentials: false

      - name: Build (Release, bootloader)
        uses: *BUILD_ACTION
        with:
          version-art-name: version-header-bl
          version-location: bootloader/Core/Inc
          project-path: bootloader
          project-target: *PROD_BUILD_TARGET_BL
          fw_art_name: Release_${{ needs.version-bl.outputs.version_tag }}