name: "Publish STM32 Firmware (GitHub Release â†’ AWS CodeArtifact)"
description: |
  Bundles STM32 firmware artifacts, uploads them to a GitHub release, and
  publishes the bundle to AWS CodeArtifact. Mirrors the behaviour of the
  Python build-deploy action: pull_request events push to the DEV repository,
  while pushes to refs/heads/main target the PROD repository.

inputs:
  tag:
    description: "Version tag to use (e.g., BCU_BL_v1.2.3 or v1.2.3-rc1). A clean semver is extracted for publishing."
    required: true
  artifact-pattern:
    description: "Artifact name or glob pattern to download (actions/download-artifact pattern syntax)."
    required: true
  package-name:
    description: "CodeArtifact package name to publish."
    required: true
  namespace:
    description: "CodeArtifact namespace for the generic package (required by generic format, e.g., 'bcu')."
    required: true

runs:
  using: "composite"
  steps:
    - name: Download firmware artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.artifact-pattern }}
        path: release/artifacts
        merge-multiple: true

    # Derive VERSION (regex), PACKAGE and FILENAME once and export to env
    - name: Derive version and filenames
      shell: bash
      run: |
        set -euo pipefail
        RAW="${{ inputs.tag }}"
        # Extract the first semver-like token (allows -rc, -dev, +build metadata).
        # Hyphen is placed at the END of the class to avoid "Invalid range end".
        VERSION="$(printf '%s' "$RAW" | sed -E 's/.*([0-9]+\.[0-9]+\.[0-9][0-9A-Za-z.+-]*).*/\1/;t;d' || true)"
        if [[ -z "${VERSION:-}" ]]; then
          echo "Could not parse version from tag: $RAW" >&2
          exit 1
        fi
        
        NAMESPACE="${{ inputs.namespace }}"
        if [[ -z "${NAMESPACE:-}" ]]; then
          echo "Namespace is required for CodeArtifact generic format." >&2
          exit 1
        fi

        PACKAGE="${{ inputs.package-name }}"
        FILENAME="${PACKAGE}-${VERSION}.zip"

        echo "VERSION=$VERSION"   >> "$GITHUB_ENV"
        echo "PACKAGE=$PACKAGE"   >> "$GITHUB_ENV"
        echo "FILENAME=$FILENAME" >> "$GITHUB_ENV"
        echo "NAMESPACE=$NAMESPACE" >> "$GITHUB_ENV"

        echo "Parsed VERSION=$VERSION, PACKAGE=$PACKAGE, FILENAME=$FILENAME, NAMESPACE=$NAMESPACE"

    - name: Create firmware bundle (.zip)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p release

        # Copy artifacts to a directory named after the file (without .zip)
        folder_name="${FILENAME%.zip}"
        cp -r artifacts "release/$folder_name"

        # Zip the directory so the internal folder matches the bundle name
        (cd release && zip -r "../$FILENAME" "$folder_name")

        ls -l "$FILENAME"

    # Optional: sanity-check that the PAT is present for PROD
    - name: Check PAT availability (PROD)
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      shell: bash
      run: |
        set -euo pipefail
        if [[ -z "${GITHUB_ACTIONS_BOT:-}" ]]; then
          echo "ERROR: GITHUB_ACTIONS_BOT env var (PAT) not set. Refusing to attempt release." >&2
          exit 1
        fi

    # ====================== PROD path (pushes to main) ======================
    - name: Configure AWS credentials (PROD)
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_CODEARTIFACT_PUBLISHER }}
        aws-region:     ${{ env.AWS_REGION_CODEARTIFACT }}
        role-duration-seconds: 1800

    - name: Publish generic package to CodeArtifact (PROD)
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      shell: bash
      run: |
        set -euo pipefail
        : "${VERSION:?missing}"; : "${PACKAGE:?missing}"; : "${FILENAME:?missing}"

        ASSET_SHA256="$(sha256sum "$FILENAME" | awk '{print $1}')"

        aws codeartifact publish-package-version \
          --domain "${{ env.AWS_DOMAIN }}" \
          --domain-owner "${{ env.AWS_DOMAIN_OWNER }}" \
          --repository "${{ env.AWS_STM32_REPO_PROD }}" \
          --format generic \
          --namespace "$NAMESPACE" \
          --package "$PACKAGE" \
          --package-version "$VERSION" \
          --asset-content "$FILENAME" \
          --asset-name "$FILENAME" \
          --asset-sha256 "$ASSET_SHA256"
  
    - name: Create/Update GitHub Release (PROD)
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.tag }}
        name: ${{ env.PACKAGE }} ${{ env.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: ${{ env.FILENAME }}
        # You can pass the PAT either via the 'token' input...
        token: ${{ env.GITHUB_ACTIONS_BOT }}

    # ================== DEV path (PRs and non-main pushes) ==================
    - name: Configure AWS credentials (DEV)
      if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_CODEARTIFACT_PUBLISHER }}
        aws-region:     ${{ env.AWS_REGION_CODEARTIFACT }}
        role-duration-seconds: 1800

    - name: Publish generic package to CodeArtifact (DEV)
      if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
      shell: bash
      run: |
        set -euo pipefail
        : "${VERSION:?missing}"; : "${PACKAGE:?missing}"; : "${FILENAME:?missing}"

        ASSET_SHA256="$(sha256sum "$FILENAME" | awk '{print $1}')"

        aws codeartifact publish-package-version \
          --domain "${{ env.AWS_DOMAIN }}" \
          --domain-owner "${{ env.AWS_DOMAIN_OWNER }}" \
          --repository "${{ env.AWS_STM32_REPO_DEV }}" \
          --format generic \
          --namespace "$NAMESPACE" \
          --package "$PACKAGE" \
          --package-version "$VERSION" \
          --asset-content "$FILENAME" \
          --asset-name "$FILENAME" \
          --asset-sha256 "$ASSET_SHA256"
