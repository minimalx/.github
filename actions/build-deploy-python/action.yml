name: "Build & Publish Python Package (Hatch â†’ AWS CodeArtifact)"
description: |
  Builds a Python wheel with Hatch, updates __version__ from a provided tag,
  uploads the wheel as a workflow artifact, and (optionally) publishes to AWS
  CodeArtifact:
    - On pull_request: publishes to the DEV repository (assumes role-dev)
    - On push to refs/heads/main: publishes to the PROD repository (assumes role-prod)

# Note: The calling workflow must grant OIDC permissions for role assumption:
#   permissions:
#     id-token: write
#     contents: read

inputs:
  tag:
    description: "Version tag to use (e.g., v1.0.0.dev5). Leading 'v' is stripped for PEP 440."
    required: true
  package:
    description: "Top-level package directory under src/ (e.g., minimal_can_utils)."
    required: true

  # --- AWS/CodeArtifact config ---
  aws-region:
    description: "AWS region for CodeArtifact (e.g., eu-west-1)."
    required: true
  domain:
    description: "AWS CodeArtifact domain."
    required: true
  domain-owner:
    description: "AWS account ID that owns the CodeArtifact domain."
    required: true
  repo-dev:
    description: "CodeArtifact repository for DEV publishes (used on pull_request)."
    required: true
  repo-prod:
    description: "CodeArtifact repository for PROD publishes (used on push to main)."
    required: true
  role-dev:
    description: "IAM role ARN to assume for DEV publishes."
    required: true
  role-prod:
    description: "IAM role ARN to assume for PROD publishes."
    required: true

  # --- Build options (optional) ---
  python-version:
    description: "Python version to use."
    required: false
    default: "3.12"
  editable-extras:
    description: "Extras to install for editable build (e.g., 'prod'). Leave blank for none."
    required: false
    default: "prod"
  build-target:
    description: "Hatch build target: wheel | sdist | all (space/comma separated allowed)."
    required: false
    default: "wheel"
  upload-artifact:
    description: "Whether to upload the built wheel(s) as a workflow artifact (true/false)."
    required: false
    default: "true"
  publish:
    description: "Whether to attempt publish to CodeArtifact based on event context (true/false)."
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"

    - name: Compute package version from tag
      shell: bash
      run: |
        TAG="${{ inputs.tag }}"
        VERSION="${TAG#v}"      # Strip leading 'v' for PEP 440 compliance
        echo "PKG_VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "Building version: $VERSION"

    - name: Overwrite __init__.py version
      shell: bash
      run: |
        INIT_FILE="src/${{ inputs.package }}/__init__.py"
        if [[ ! -f "$INIT_FILE" ]]; then
          echo "Error: $INIT_FILE does not exist!"
          exit 1
        fi
        # Remove existing __version__ line(s) and append new one
        grep -v '^__version__' "$INIT_FILE" > "$INIT_FILE.tmp" || true
        echo "__version__ = \"${PKG_VERSION}\"" >> "$INIT_FILE.tmp"
        mv "$INIT_FILE.tmp" "$INIT_FILE"
        echo "Updated $INIT_FILE with version ${PKG_VERSION}"

    - name: Install build tooling
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install hatch build twine
        if [[ -n "${{ inputs.editable-extras }}" ]]; then
          pip install -e .[${{ inputs.editable-extras }}]
        else
          pip install -e .
        fi

    - name: Build package with Hatch
      shell: bash
      run: |
        # Support multiple targets: "wheel", "sdist", or "wheel sdist"
        IFS=', ' read -r -a TARGETS <<< "${{ inputs.build-target }}"
        for t in "${TARGETS[@]}"; do
          case "$t" in
            wheel|sdist) hatch build -t "$t" ;;
            all) hatch build ;;
            *) echo "Unknown build target: $t" && exit 1 ;;
          esac
        done
        ls -l dist || (echo "No dist/ directory found after build" && exit 1)

    - name: Upload build artifacts
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: wheel-dist
        path: |
          dist/*.whl
          dist/*.tar.gz
        if-no-files-found: error

    # ================= DEV (pull_request) =================
    - name: Configure AWS credentials (DEV)
      if: ${{ inputs.publish == 'true' && github.event_name == 'pull_request' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-dev }}
        aws-region: ${{ inputs.aws-region }}
        role-duration-seconds: 1800 

    - name: Login Twine to CodeArtifact (DEV)
      if: ${{ inputs.publish == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        aws codeartifact login \
          --tool twine \
          --domain "${{ inputs.domain }}" \
          --domain-owner "${{ inputs['domain-owner'] }}" \
          --repository "${{ inputs['repo-dev'] }}" \
          --region "${{ inputs['aws-region'] }}" \
          --duration-seconds 1800

    - name: Upload to DEV repository
      if: ${{ inputs.publish == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        twine upload --repository codeartifact dist/*

    # ================= PROD (push to main) =================
    - name: Configure AWS credentials (PROD)
      if: ${{ inputs.publish == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-prod }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login Twine to CodeArtifact (PROD)
      if: ${{ inputs.publish == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      shell: bash
      run: |
        aws codeartifact login \
          --tool twine \
          --domain "${{ inputs.domain }}" \
          --domain-owner "${{ inputs['domain-owner'] }}" \
          --repository "${{ inputs['repo-prod'] }}" \
          --region "${{ inputs['aws-region'] }}"

    - name: Upload to PROD repository
      if: ${{ inputs.publish == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      shell: bash
      run: |
        twine upload --repository codeartifact dist/*
